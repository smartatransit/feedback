// Code generated by counterfeiter. DO NOT EDIT.
package apifakes

import (
	"net/http"
	"sync"

	"github.com/smartatransit/feedback/api"
)

type FakeAPI struct {
	HealthStub        func(http.ResponseWriter, *http.Request)
	healthMutex       sync.RWMutex
	healthArgsForCall []struct {
		arg1 http.ResponseWriter
		arg2 *http.Request
	}
	SaveFeedbackStub        func(http.ResponseWriter, *http.Request)
	saveFeedbackMutex       sync.RWMutex
	saveFeedbackArgsForCall []struct {
		arg1 http.ResponseWriter
		arg2 *http.Request
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAPI) Health(arg1 http.ResponseWriter, arg2 *http.Request) {
	fake.healthMutex.Lock()
	fake.healthArgsForCall = append(fake.healthArgsForCall, struct {
		arg1 http.ResponseWriter
		arg2 *http.Request
	}{arg1, arg2})
	fake.recordInvocation("Health", []interface{}{arg1, arg2})
	fake.healthMutex.Unlock()
	if fake.HealthStub != nil {
		fake.HealthStub(arg1, arg2)
	}
}

func (fake *FakeAPI) HealthCallCount() int {
	fake.healthMutex.RLock()
	defer fake.healthMutex.RUnlock()
	return len(fake.healthArgsForCall)
}

func (fake *FakeAPI) HealthCalls(stub func(http.ResponseWriter, *http.Request)) {
	fake.healthMutex.Lock()
	defer fake.healthMutex.Unlock()
	fake.HealthStub = stub
}

func (fake *FakeAPI) HealthArgsForCall(i int) (http.ResponseWriter, *http.Request) {
	fake.healthMutex.RLock()
	defer fake.healthMutex.RUnlock()
	argsForCall := fake.healthArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPI) SaveFeedback(arg1 http.ResponseWriter, arg2 *http.Request) {
	fake.saveFeedbackMutex.Lock()
	fake.saveFeedbackArgsForCall = append(fake.saveFeedbackArgsForCall, struct {
		arg1 http.ResponseWriter
		arg2 *http.Request
	}{arg1, arg2})
	fake.recordInvocation("SaveFeedback", []interface{}{arg1, arg2})
	fake.saveFeedbackMutex.Unlock()
	if fake.SaveFeedbackStub != nil {
		fake.SaveFeedbackStub(arg1, arg2)
	}
}

func (fake *FakeAPI) SaveFeedbackCallCount() int {
	fake.saveFeedbackMutex.RLock()
	defer fake.saveFeedbackMutex.RUnlock()
	return len(fake.saveFeedbackArgsForCall)
}

func (fake *FakeAPI) SaveFeedbackCalls(stub func(http.ResponseWriter, *http.Request)) {
	fake.saveFeedbackMutex.Lock()
	defer fake.saveFeedbackMutex.Unlock()
	fake.SaveFeedbackStub = stub
}

func (fake *FakeAPI) SaveFeedbackArgsForCall(i int) (http.ResponseWriter, *http.Request) {
	fake.saveFeedbackMutex.RLock()
	defer fake.saveFeedbackMutex.RUnlock()
	argsForCall := fake.saveFeedbackArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.healthMutex.RLock()
	defer fake.healthMutex.RUnlock()
	fake.saveFeedbackMutex.RLock()
	defer fake.saveFeedbackMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ api.API = new(FakeAPI)
