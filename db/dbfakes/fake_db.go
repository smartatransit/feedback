// Code generated by counterfeiter. DO NOT EDIT.
package dbfakes

import (
	"context"
	"sync"
	"time"

	"github.com/smartatransit/feedback/db"
)

type FakeDB struct {
	GetRecentOutagesStub        func(context.Context, time.Time) ([]db.Feedback, error)
	getRecentOutagesMutex       sync.RWMutex
	getRecentOutagesArgsForCall []struct {
		arg1 context.Context
		arg2 time.Time
	}
	getRecentOutagesReturns struct {
		result1 []db.Feedback
		result2 error
	}
	getRecentOutagesReturnsOnCall map[int]struct {
		result1 []db.Feedback
		result2 error
	}
	MigrateStub        func(context.Context) error
	migrateMutex       sync.RWMutex
	migrateArgsForCall []struct {
		arg1 context.Context
	}
	migrateReturns struct {
		result1 error
	}
	migrateReturnsOnCall map[int]struct {
		result1 error
	}
	SaveFeedbackStub        func(context.Context, db.Feedback) error
	saveFeedbackMutex       sync.RWMutex
	saveFeedbackArgsForCall []struct {
		arg1 context.Context
		arg2 db.Feedback
	}
	saveFeedbackReturns struct {
		result1 error
	}
	saveFeedbackReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDB) GetRecentOutages(arg1 context.Context, arg2 time.Time) ([]db.Feedback, error) {
	fake.getRecentOutagesMutex.Lock()
	ret, specificReturn := fake.getRecentOutagesReturnsOnCall[len(fake.getRecentOutagesArgsForCall)]
	fake.getRecentOutagesArgsForCall = append(fake.getRecentOutagesArgsForCall, struct {
		arg1 context.Context
		arg2 time.Time
	}{arg1, arg2})
	fake.recordInvocation("GetRecentOutages", []interface{}{arg1, arg2})
	fake.getRecentOutagesMutex.Unlock()
	if fake.GetRecentOutagesStub != nil {
		return fake.GetRecentOutagesStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.getRecentOutagesReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeDB) GetRecentOutagesCallCount() int {
	fake.getRecentOutagesMutex.RLock()
	defer fake.getRecentOutagesMutex.RUnlock()
	return len(fake.getRecentOutagesArgsForCall)
}

func (fake *FakeDB) GetRecentOutagesCalls(stub func(context.Context, time.Time) ([]db.Feedback, error)) {
	fake.getRecentOutagesMutex.Lock()
	defer fake.getRecentOutagesMutex.Unlock()
	fake.GetRecentOutagesStub = stub
}

func (fake *FakeDB) GetRecentOutagesArgsForCall(i int) (context.Context, time.Time) {
	fake.getRecentOutagesMutex.RLock()
	defer fake.getRecentOutagesMutex.RUnlock()
	argsForCall := fake.getRecentOutagesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDB) GetRecentOutagesReturns(result1 []db.Feedback, result2 error) {
	fake.getRecentOutagesMutex.Lock()
	defer fake.getRecentOutagesMutex.Unlock()
	fake.GetRecentOutagesStub = nil
	fake.getRecentOutagesReturns = struct {
		result1 []db.Feedback
		result2 error
	}{result1, result2}
}

func (fake *FakeDB) GetRecentOutagesReturnsOnCall(i int, result1 []db.Feedback, result2 error) {
	fake.getRecentOutagesMutex.Lock()
	defer fake.getRecentOutagesMutex.Unlock()
	fake.GetRecentOutagesStub = nil
	if fake.getRecentOutagesReturnsOnCall == nil {
		fake.getRecentOutagesReturnsOnCall = make(map[int]struct {
			result1 []db.Feedback
			result2 error
		})
	}
	fake.getRecentOutagesReturnsOnCall[i] = struct {
		result1 []db.Feedback
		result2 error
	}{result1, result2}
}

func (fake *FakeDB) Migrate(arg1 context.Context) error {
	fake.migrateMutex.Lock()
	ret, specificReturn := fake.migrateReturnsOnCall[len(fake.migrateArgsForCall)]
	fake.migrateArgsForCall = append(fake.migrateArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	fake.recordInvocation("Migrate", []interface{}{arg1})
	fake.migrateMutex.Unlock()
	if fake.MigrateStub != nil {
		return fake.MigrateStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.migrateReturns
	return fakeReturns.result1
}

func (fake *FakeDB) MigrateCallCount() int {
	fake.migrateMutex.RLock()
	defer fake.migrateMutex.RUnlock()
	return len(fake.migrateArgsForCall)
}

func (fake *FakeDB) MigrateCalls(stub func(context.Context) error) {
	fake.migrateMutex.Lock()
	defer fake.migrateMutex.Unlock()
	fake.MigrateStub = stub
}

func (fake *FakeDB) MigrateArgsForCall(i int) context.Context {
	fake.migrateMutex.RLock()
	defer fake.migrateMutex.RUnlock()
	argsForCall := fake.migrateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeDB) MigrateReturns(result1 error) {
	fake.migrateMutex.Lock()
	defer fake.migrateMutex.Unlock()
	fake.MigrateStub = nil
	fake.migrateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDB) MigrateReturnsOnCall(i int, result1 error) {
	fake.migrateMutex.Lock()
	defer fake.migrateMutex.Unlock()
	fake.MigrateStub = nil
	if fake.migrateReturnsOnCall == nil {
		fake.migrateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.migrateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDB) SaveFeedback(arg1 context.Context, arg2 db.Feedback) error {
	fake.saveFeedbackMutex.Lock()
	ret, specificReturn := fake.saveFeedbackReturnsOnCall[len(fake.saveFeedbackArgsForCall)]
	fake.saveFeedbackArgsForCall = append(fake.saveFeedbackArgsForCall, struct {
		arg1 context.Context
		arg2 db.Feedback
	}{arg1, arg2})
	fake.recordInvocation("SaveFeedback", []interface{}{arg1, arg2})
	fake.saveFeedbackMutex.Unlock()
	if fake.SaveFeedbackStub != nil {
		return fake.SaveFeedbackStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.saveFeedbackReturns
	return fakeReturns.result1
}

func (fake *FakeDB) SaveFeedbackCallCount() int {
	fake.saveFeedbackMutex.RLock()
	defer fake.saveFeedbackMutex.RUnlock()
	return len(fake.saveFeedbackArgsForCall)
}

func (fake *FakeDB) SaveFeedbackCalls(stub func(context.Context, db.Feedback) error) {
	fake.saveFeedbackMutex.Lock()
	defer fake.saveFeedbackMutex.Unlock()
	fake.SaveFeedbackStub = stub
}

func (fake *FakeDB) SaveFeedbackArgsForCall(i int) (context.Context, db.Feedback) {
	fake.saveFeedbackMutex.RLock()
	defer fake.saveFeedbackMutex.RUnlock()
	argsForCall := fake.saveFeedbackArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeDB) SaveFeedbackReturns(result1 error) {
	fake.saveFeedbackMutex.Lock()
	defer fake.saveFeedbackMutex.Unlock()
	fake.SaveFeedbackStub = nil
	fake.saveFeedbackReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDB) SaveFeedbackReturnsOnCall(i int, result1 error) {
	fake.saveFeedbackMutex.Lock()
	defer fake.saveFeedbackMutex.Unlock()
	fake.SaveFeedbackStub = nil
	if fake.saveFeedbackReturnsOnCall == nil {
		fake.saveFeedbackReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.saveFeedbackReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeDB) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getRecentOutagesMutex.RLock()
	defer fake.getRecentOutagesMutex.RUnlock()
	fake.migrateMutex.RLock()
	defer fake.migrateMutex.RUnlock()
	fake.saveFeedbackMutex.RLock()
	defer fake.saveFeedbackMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeDB) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.DB = new(FakeDB)
